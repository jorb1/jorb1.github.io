[
  {
    "objectID": "posts/2024-12-4-thomas-fire-post/thomas_fire_analysis.html",
    "href": "posts/2024-12-4-thomas-fire-post/thomas_fire_analysis.html",
    "title": "Data Analysis of the Thomas Fire in Ventura and Santa Barbara Counties, 2017",
    "section": "",
    "text": "Repository Link: https://github.com/jorb1/eds220-hwk4\n\n\n\nImage of Fire"
  },
  {
    "objectID": "posts/2024-12-4-thomas-fire-post/thomas_fire_analysis.html#background",
    "href": "posts/2024-12-4-thomas-fire-post/thomas_fire_analysis.html#background",
    "title": "Data Analysis of the Thomas Fire in Ventura and Santa Barbara Counties, 2017",
    "section": "Background:",
    "text": "Background:\nThe Thomas Fire, which burned over 280,000 acres in Ventura and Santa Barbara counties in December 2017, was one of California’s largest wildfires at the time. It caused widespread ecological damage, displaced communities, and left lasting environmental impacts.\nIn this analysis, I will find the perimeter of the fire, analyze spatial data of the lasting fire scars through false color images, and visualize the effects that this fire had on air quality in the Santa Barbara area.\nAbout the data\nIn this task I will use historical open-access data about fire perimeters in California. There are several datasets with this information online. The dataset that I found is from data.gov at this link: https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436. It was a particularly useful site, as there were multiple filetypes to choose from.\nThe next dataset I will use is a simplified collection of bands (red, green, blue, near-infrared and shortwave infrared) from the Landsat Collection 2 Level-2 atmosperically corrected surface reflectance data, collected by the Landsat 8 satellite. These data were retrieved from the Microsof Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution. (This data should be used for visualization and educational purposes only.)\nFinally, I will use Air Quality Index (AQI) data from the US Environmental Protection Agency to visualize the impact on the AQI of the 2017 Thomas Fire in Santa Barbara County.\n\nFirst up in my Analysis:\nFire perimeter data retrieval and selection\nI will find and isolate the perimeter of the Thomas Fire, using open source data. I will then be able to use the Thomas Fire perimeter data in further analysis of the effects of the fire on Santa Barbara ecology. I will save this perimeter data as a file in my repository, for independent use in other notebooks.\n\nTo begin, I will do some exploratory data analysis to get a sense of the dataset I am using. I will ensure that I know the CRS of the data, for use in further spatial data joining and analysis.\n\n\n# Load libraries\n\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nfrom shapely.geometry import Polygon\nimport rioxarray as rioxr\nimport xarray as xr\n\n# Read in data \n\nfp_perimeter = os.path.join('data', 'California_Fire_Perimeters_(all).shp')\nperimeter = gpd.read_file(fp_perimeter)\n\n\nperimeter.head(3)\n\n\n\n\n\n\n\n\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\nCAUSE\nC_METHOD\nOBJECTIVE\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nIRWINID\nFIRE_NUM\nCOMPLEX_ID\nDECADES\ngeometry\n\n\n\n\n0\n2023\nCA\nCDF\nSKU\nWHITWORTH\n00004808\n2023-06-17\n2023-06-17\n5\n1\n1\n5.72913\nNone\nNone\n{7985848C-0AC2-4BA4-8F0E-29F778652E61}\nNone\nNone\n2020\nPOLYGON ((-13682443.000 5091132.739, -13682445...\n\n\n1\n2023\nCA\nLRA\nBTU\nKAISER\n00010225\n2023-06-02\n2023-06-02\n5\n1\n1\n13.60240\nNone\nNone\n{43EBCC88-B3AC-48EB-8EF5-417FE0939CCF}\nNone\nNone\n2020\nPOLYGON ((-13576727.142 4841226.161, -13576726...\n\n\n2\n2023\nCA\nCDF\nAEU\nJACKSON\n00017640\n2023-07-01\n2023-07-02\n2\n1\n1\n27.81450\nNone\nNone\n{B64E1355-BF1D-441A-95D0-BC1FBB93483B}\nNone\nNone\n2020\nPOLYGON ((-13459243.000 4621236.000, -13458968...\n\n\n\n\n\n\n\n\n# Figure out the dimensions of the dataframe\nprint(\"Shape of the data:\", perimeter.shape)\n\n# Figure out if the columns are the expected datatypes\nprint(\"Data types:\", perimeter.dtypes)\n\nShape of the data: (22261, 19)\nData types: YEAR_            int64\nSTATE           object\nAGENCY          object\nUNIT_ID         object\nFIRE_NAME       object\nINC_NUM         object\nALARM_DATE      object\nCONT_DATE       object\nCAUSE            int64\nC_METHOD         int64\nOBJECTIVE        int64\nGIS_ACRES      float64\nCOMMENTS        object\nCOMPLEX_NA      object\nIRWINID         object\nFIRE_NUM        object\nCOMPLEX_ID      object\nDECADES          int64\ngeometry      geometry\ndtype: object\n\n\n\n# Explore data CRS\nperimeter.crs\n\n&lt;Projected CRS: EPSG:3857&gt;\nName: WGS 84 / Pseudo-Mercator\nAxis Info [cartesian]:\n- X[east]: Easting (metre)\n- Y[north]: Northing (metre)\nArea of Use:\n- name: World between 85.06°S and 85.06°N.\n- bounds: (-180.0, -85.06, 180.0, 85.06)\nCoordinate Operation:\n- name: Popular Visualisation Pseudo-Mercator\n- method: Popular Visualisation Pseudo Mercator\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\n\n# Find out if its projected or geographic\nperimeter.crs.is_projected\n\nTrue\n\n\nFrom this data exploration, I learned that the dataset is much larger than I need, but does contain useful information in addition to the geometries, such as acres burned, cause, etc. I learned that the names of the fires are in all capitals, and that the year numbers are INT64, so I can treat them as numeric values. Finally, I leaned that the CRS is WGS 84, and that is is projected data, rather than geographic.\n\nFrom this fire perimeter data, select the Thomas Fire boundary. The fire occurred in 2017.\n\n\n# First, make the column names easier to work with\nperimeter.columns = perimeter.columns.str.lower()\n\n# Filter data to only include the Thomas Fire boudnary in 2017\nthomas = perimeter[(perimeter['fire_name'] == \"THOMAS\") & (perimeter['year_'] == 2017)]\n\nthomas\n\n\n\n\n\n\n\n\nyear_\nstate\nagency\nunit_id\nfire_name\ninc_num\nalarm_date\ncont_date\ncause\nc_method\nobjective\ngis_acres\ncomments\ncomplex_na\nirwinid\nfire_num\ncomplex_id\ndecades\ngeometry\n\n\n\n\n2654\n2017\nCA\nUSF\nVNC\nTHOMAS\n00003583\n2017-12-04\n2018-01-12\n9\n7\n1\n281791.0\nCONT_DATE based on Inciweb\nNone\nNone\nNone\nNone\n2010\nMULTIPOLYGON (((-13316089.016 4088553.040, -13...\n\n\n\n\n\n\n\n\nSave only the 2017 Thomas Fire boundary as a geospatial file in the format of my choosing. The file should go into the data/ directory in my repository.\n\n\n# Save the fire boundary as a file that can go into my repository\n# Save the filtered GeoDataFrame as a GeoJSON file\npath = 'data/thomas.geojson'\nthomas.to_file(path, driver='GeoJSON')\n\n\nI chose to use a GeoJSON file format for my perimeter boundary, because it is a common and useful “open format for encoding vector points and their attributes”. It comes in one file, as compared to .shp files, which have many dependencies. It requires the data be in WGS84, and since I already verified that this data is in that CRS, it seems like the best possible option for this analysis."
  },
  {
    "objectID": "posts/2024-12-4-thomas-fire-post/thomas_fire_analysis.html#next-up",
    "href": "posts/2024-12-4-thomas-fire-post/thomas_fire_analysis.html#next-up",
    "title": "Data Analysis of the Thomas Fire in Ventura and Santa Barbara Counties, 2017",
    "section": "Next up:",
    "text": "Next up:\n\nTrue Color Image\n\n# Construct a file path to the Landsat data using os and import it\nfp = os.path.join('data', 'landsat8-2018-01-26-sb-simplified.nc')\nsb_rast = rioxr.open_rasterio(fp, decode_coords=\"all\")\nsb_rast\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\n\n#Explore the data and write a brief summary of the information you obtained from the preliminary information. \nprint('Shape: ', dict(sb_rast.sizes))\nprint(sb_rast.data_vars, '\\n')\n\nShape:  {'band': 1, 'x': 870, 'y': 731}\nData variables:\n    red      (band, y, x) float64 5MB ...\n    green    (band, y, x) float64 5MB ...\n    blue     (band, y, x) float64 5MB ...\n    nir08    (band, y, x) float64 5MB ...\n    swir22   (band, y, x) float64 5MB ... \n\n\n\nThis data exploration shows me that there is only one band on this raster. This means that including it is redundant, and the band will need to be removed. I also learned that each color band is a float64 integer, which is good to know when doing analysis.\n\n#Drop the band dimension of the data. HINT: squeeze() and drop_vars().\n# Original dimensions and coordinates\nprint(sb_rast.dims, sb_rast.coords, '\\n')\n\n# Remove length 1 dimension (band)\nsb_rast = sb_rast.squeeze()\nprint(sb_rast.dims, sb_rast.coords, '\\n')\n\n# Drop the coordinates associated to band\nsb_rast = sb_rast.drop_vars('band')\nprint(sb_rast.dims, sb_rast.coords, '\\n')\n\nFrozenMappingWarningOnValuesAccess({'band': 1, 'x': 870, 'y': 731}) Coordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0 \n\nFrozenMappingWarningOnValuesAccess({'x': 870, 'y': 731}) Coordinates:\n    band         int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0 \n\nFrozenMappingWarningOnValuesAccess({'x': 870, 'y': 731}) Coordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0 \n\n\n\nTo get a good look at this raster data, without creating any new variables:\nI will select the red, green, and blue variables (in that order) of the xarray.Dataset holding the Landsat data, convert it to a numpy.array using the to_array() method, and then use .plot.imshow() to create an RGB image with the data. There will be a warning, that’s ok. I will adjust the scale used for plotting the bands to get a true color image.\nThe first plot will have the parameter set to be robust=False.\n\n# Select red, green, and blue variables, stack them, and plot as an RGB image\nsb_rast[['red', 'green', 'blue']].to_array().plot.imshow(robust=False)\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n\n\n\n\n\n\n\n\n\nAs we can see, this doesn’t turn out quite as we’d hoped. That’s because, by setting that parameter to False, we are not accounting for cloud cover. Their RGB values are outliers and cause the other values to be squished when plotting.\nTo account for this, I will use the robust = True parameter at the end of my code, in order to deal with the clouds:\n\n# Select red, green, and blue variables, stack them, and plot as an RGB image\nsb_rast[['red', 'green', 'blue']].to_array().plot.imshow(robust=True)\n\n\n\n\n\n\n\n\nThis true color image gives us a visual that mostly resembles what we would expect to see with our human eyes looking down on Santa Barbara. The colors are what we would expect to see, and this can be useful for identifying landmarks. However, sometimes it is important to get a new perspective. For example, using this map, it is almost impossible to see the area in which the Thomas Fire burned. And that’s when we bring in…\n\n\n4. False color image\nTo continue my analysis, and without creating any new variables, create a false color image by plotting the short-wave infrared (swir22), near-infrared, and red variables (in that order).\n\n# Select the swir22, near-infrared, and red variables, stack them, and plot as a false color image\nsb_rast[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust=True)\n\n\n\n\n\n\n\n\nFalse color imagery, created using satellite data from instruments like Landsat, is a useful tool for monitoring wildfire impacts. By assigning infrared bands to visible colors, these images highlight vegetation health, burn severity, and the extent of fire scars. This approach helps researchers and land managers assess recovery efforts, identify high-risk areas, and plan restoration strategies.\n\n\n5. Map\nFinally, I will create a map showing the shortwave infrared/near-infrared/red false color image together with the Thomas Fire perimeter.\n\n# Read in the Thomas fire perimeter we created\nfp2 = os.path.join('data', 'thomas.geojson')\nthomas_perim = gpd.read_file(fp2)\nthomas_perim.plot()\n\n\n\n\n\n\n\n\nThis initial plot shows us that our perimeter file is looking good. It also shows us the perimeter that we will want to clip our raster file to, in order to create our map analyzing the burn area of the Thomas Fire.\nFirst, we will have to ensure that our CRS’s match for these datasets…\n\n# Examine CRss\nprint('Santa Barbara Raster CRS: ', sb_rast.rio.crs)\nprint('Thomas Fire Perimeter CRS: ', thomas_perim.crs)\n\nSanta Barbara Raster CRS:  EPSG:32611\nThomas Fire Perimeter CRS:  EPSG:3857\n\n\n\n# Reproject CRS of the Santa Barbara Raster, and use a print statement to ensure it worked\nsb_rast = sb_rast.rio.reproject(\"EPSG:3857\")\nprint('Matched CRS?', sb_rast.rio.crs == thomas_perim.crs)\n\nMatched CRS? True\n\n\n\n# Clip the sb_rast map to match the dimensions of the Thomas Fire Perimeter\nsb_fire = sb_rast.rio.clip_box(*thomas_perim.total_bounds)\n\n\n# Map our false color image with the fire boundary overlaid\nfig, ax = plt.subplots(figsize=(10, 10))\nsb_fire[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax=ax, robust=True)\nthomas_perim.boundary.plot(ax=ax, edgecolor=\"firebrick\", linewidth = 2, label=\"Thomas Fire Perimeter\")\nax.set_title(\"Thomas Fire: Burn Scars in False Color Imagery\", fontsize=16)\nax.legend(loc='upper right', fontsize=12)\n\nplt.show()\n\n\n\n\n\n\n\n\nOur true color image was insufficient to reveal plainly the path of the Thomas Fire. However, by simply utilizing a false color composit, the path of the fire and the effect it had on the landscape are much more clear.\nThis final map clearly shows the burn scars from the fire, contained within the perimeter boundary we utilized to help us further identify the exact area effected."
  },
  {
    "objectID": "posts/2024-12-4-thomas-fire-post/thomas_fire_analysis.html#conclusion",
    "href": "posts/2024-12-4-thomas-fire-post/thomas_fire_analysis.html#conclusion",
    "title": "Data Analysis of the Thomas Fire in Ventura and Santa Barbara Counties, 2017",
    "section": "Conclusion",
    "text": "Conclusion\nUsing Python in Jupiter Notebooks, I have successfully executed a series of analysis analyzing a fire that had clear and lasting effects on the regions of Santa Barbara and Ventura. This analysis also showcases the variety of data types that Python can handle, from spatial data to data visualization.\n\nCitations:\nAirNow. “Air Quality Index (AQI) Basics.” Accessed December 4, 2024. https://www.airnow.gov/aqi/aqi-basics/.\nC. Galaz García, EDS 220 - Working with Environmental Datasets, Course Notes. 2024. [Online]. Available: https://meds-eds-220.github.io/MEDS-eds-220-course/book/preface.html\nCAL Fire. “California Fire Perimeters (All).” Data.gov. Metadata created March 30, 2024, updated May 14, 2024. https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436.\nHamm, Keith. “Closing Schools and Moving Finals Due to Thomas Fire: A Look at Our Education System’s Response to the Wildfire.” Santa Barbara Independent, December 13, 2017. https://www.independent.com/2017/12/13/closing-schools-and-moving-finals-due-thomas-fire/.\nMicrosoft Planetary Computer. Landsat Collection 2 Level-2 Atmospherically Corrected Surface Reflectance Data from Landsat 8 [Dataset]. Simplified for visualization and educational purposes. Accessed November 20, 2024. https://planetarycomputer.microsoft.com.\nU.S. Environmental Protection Agency. “Air Data: Air Quality Data Collected at Outdoor Monitors Across the US.” Accessed December 4, 2024. https://www.epa.gov/outdoor-air-quality-data."
  },
  {
    "objectID": "posts/2024-10-18-my-first-post/index.html",
    "href": "posts/2024-10-18-my-first-post/index.html",
    "title": "Blog Post Title",
    "section": "",
    "text": "I’m going to insert a footnote here1"
  },
  {
    "objectID": "posts/2024-10-18-my-first-post/index.html#this-is-my-first-section",
    "href": "posts/2024-10-18-my-first-post/index.html#this-is-my-first-section",
    "title": "Blog Post Title",
    "section": "",
    "text": "I’m going to insert a footnote here1"
  },
  {
    "objectID": "posts/2024-10-18-my-first-post/index.html#this-is-my-second",
    "href": "posts/2024-10-18-my-first-post/index.html#this-is-my-second",
    "title": "Blog Post Title",
    "section": "This is my second",
    "text": "This is my second\nHere’s my next paragraph2\nhere is more random text. im going to cite a journal article now.(Gaynor et al. 2022)"
  },
  {
    "objectID": "posts/2024-10-18-my-first-post/index.html#footnotes",
    "href": "posts/2024-10-18-my-first-post/index.html#footnotes",
    "title": "Blog Post Title",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHere is a new footnote↩︎\nHere is my second footnote↩︎"
  },
  {
    "objectID": "DELETE-LATER/practice.html",
    "href": "DELETE-LATER/practice.html",
    "title": "Here is my level one header",
    "section": "",
    "text": "Here is my level one header\nHere is my first paragraph\nHere is my second paragraph, where you can read more about MEDS.\nThis is very important text!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "What I do for work\nsome test goes here"
  },
  {
    "objectID": "about.html#what-i-do-for-fun",
    "href": "about.html#what-i-do-for-fun",
    "title": "About",
    "section": "What I do for fun",
    "text": "What I do for fun\n\ngive the people what they want\n\nhere is some more text\n\nhere is a line\nhere is another line\n\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bailey Jørgensen",
    "section": "",
    "text": "Bailey Jørgensen grew up in Montana and got her B.S. in Archaeology at Montana State University. When not at Bren, she works as the Collections Manager at the Alf Museum of Paleontology in Claremont, California. At the museum, she cares for an active research collection and exhibits hall and coleads cohorts of students in paleontological fieldwork and data collection. Her fieldwork areas include backcountry quarries in Grand Staircase Escalante National Monument, sites in the Mojave Desert, Manti-la-Sal National Forest, Montana’s Gravelly Range, Bighorn Basin in Wyoming, and Bayanzag in Mongolia.\nBefore finding the Alf Museum, she worked sailing and preserving historic wooden ships for maritime museums and institutes. She helped run programs such as the Topsail STEM Adventure Program and the Beyond the Bell Oceanography Middle School Program at the Los Angeles Maritime Institute.\nHer experiences in data management have allowed her to participate in active research and data management. She joined the MEDS program at the Bren School to fully maximize these opportunities, and to deepen the technical knowledge required for more advanced projects. She hopes to continue work in the biodiversity heritage sector, especially for marine environments."
  },
  {
    "objectID": "posts/2024-12-4-thomas-fire-post/index.html",
    "href": "posts/2024-12-4-thomas-fire-post/index.html",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "CitationBibTeX citation:@online{jørgensen2024,\n  author = {Jørgensen, Bailey},\n  title = {Thomas {Fire} {Analysis}},\n  date = {2024-10-18},\n  url = {https://jorb1.github.io/posts/2024-12-4-thomas-fire-post/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nJørgensen, Bailey. 2024. “Thomas Fire Analysis.” October\n18, 2024. https://jorb1.github.io/posts/2024-12-4-thomas-fire-post/."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "Data Analysis of the Thomas Fire in Ventura and Santa Barbara Counties, 2017\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlog Post Title\n\n\n\nEDS\n\n\nRobots\n\n\nBoats\n\n\nPaleontology\n\n\n\na short catchy description of the blog post\n\n\n\nBailey Jørgensen\n\n\nOct 18, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThomas Fire Analysis\n\n\n\nEDS\n\n\nRobots\n\n\nBoats\n\n\nPaleontology\n\n\n\nAQI and spatial analysis walkthrough\n\n\n\nBailey Jørgensen\n\n\nOct 18, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  }
]